h1 What's this?
p 
  | This website contains a simple example of a predictive parser. In computer science, a recursive descent parser is a kind of top-down parser built from a set of mutually recursive procedures (or a non-recursive equivalent) where each such procedure usually implements one of the production rules of the grammar. Thus the structure of the resulting program closely mirrors that of the grammar it recognizes.
p 
  | A predictive parser is a recursive descent parser that does not require backtracking. Predictive parsing is possible only for the class of LL(k) grammars, which are the context-free grammars for which there exists some positive integer k that allows a recursive descent parser to decide which production to use by examining only the next k tokens of input. (The LL(k) grammars therefore exclude all ambiguous grammars, as well as all grammars that contain left recursion. Any context-free grammar can be transformed into an equivalent grammar that has no left recursion, but removal of left recursion does not always yield an LL(k) grammar.) A predictive parser runs in linear time.

div#parser
  h2 Load example to parse
  div
    textarea#original[autofocus rows="10"]
  br
  div.centered
    .loadfile
      button#example1[type="button" onclick="dump('/examples/example1.txt');"]
        | example1
      button#example2[type="button" onclick="dump('/examples/example2.txt');"]
        | example2
      button#example3[type="button" onclick="dump('/examples/example3.txt');"]
        | example3
      button#exampleerr[type="button" onclick="dump('/examples/example_err.txt');"]
        | example_err
      input#files type="file" 

    javascript:
        function dump(fileName) {
          $.ajax({
            url: fileName,
            cache: false,
            success: function (data) {
              $("#original").val(data);
            }
          });
        }

        document.getElementById('files').addEventListener('change', CopyMe, false);

        function CopyMe(evt) {
          var file = evt.target.files[0];
          if (file) {
            var reader = new FileReader();
            reader.onload = function(e) { 
              original.innerHTML = e.target.result;
            }
            reader.readAsText(file);
          }
          else { alert("Failed to load file"); }
        }
		
	input#PARSE.mylink[value="parse" type="button"]


pre#OUTPUT
